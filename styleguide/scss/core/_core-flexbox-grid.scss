//-----------------------------------------------------------------------//
// $FLEXBOX-GRID
// This is the flexbox-based responsive grid system.
// Flexbox is used because standard responsive grids
// have been problematic with scaling content.
// Most responsive grid features are available, including
// a twelve unit measurement system in addition to percentages.
//-----------------------------------------------------------------------//


//-----------------------------------------------------------------------//
// MIXINS AND FUNCTIONS
//-----------------------------------------------------------------------//

@mixin sf-flexbox-grid (
    $from:false,
    $upto:false,

    $use-wrap:true,
    $use-reverse:false,
    $use-equal-heights:false,

    $gridcell-width:false, // Grid cell widths (all the same; e.g. one-half)
    $gutter:false,             // Horizontal gutter (e.g. 5%, 3rem)
    $row-gutter:false,         // Bottom margin (gutter) when grid cells wrap, except for the last row (e.g. 3rem)

    $justify-content:flex-start,
    $align-items:flex-start,
    $centered-grid:false
    ) {


    // GLOBAL GRID VARIABLES, RESET

    $sf-fbg-position: relative !global;
    $sf-fbg-display: flex !global;

    $sf-fbg-padding-top: 0 !global;
    $sf-fbg-padding-right: 0 !global;
    $sf-fbg-padding-bottom: 0 !global;
    $sf-fbg-padding-left: 0 !global;

    $sf-fbg-margin-top: 0 !global;
    $sf-fbg-margin-right: 0 !global;
    $sf-fbg-margin-bottom: 0 !global;
    $sf-fbg-margin-left: 0 !global;

    $sf-fbg-flex-direction: row !global;
    $sf-fbg-flex-wrap: nowrap !global;
    $sf-fbg-flex-grow: initial !global;
    $sf-fbg-flex-shrink: initial !global;

    $sf-fbg-gridcell-display: block !global;
    $sf-fbg-gridcell-position: relative !global;

    $sf-fbg-gridcell-padding-top: 0 !global;
    $sf-fbg-gridcell-padding-right: 0 !global;
    $sf-fbg-gridcell-padding-bottom: 0 !global;
    $sf-fbg-gridcell-padding-left: 0 !global;

    $sf-fbg-gridcell-height: auto !global;

    $sf-fbg-gridcell-box-sizing: false !global;
    $sf-fbg-gridcell-flex-grow: 0 !global;
    $sf-fbg-gridcell-flex-shrink: initial !global;
    $sf-fbg-gridcell-flex-direction: initial !global;
    $sf-fbg-gridcell-justify-content: initial !global;

    $sf-fbg-gridcell-presentation-height: auto !global;

    // BEGIN MIXIN

    $from-breakpoint: $from;
    $upto-breakpoint: $upto;

    @if ($from == false and $upto == false) {

        $from-breakpoint: zero;
    }

    @if ($centered-grid != false) {

        $align-items: center;
    }

    @if ($use-wrap != false) {

        $sf-fbg-flex-wrap: wrap !global;
    }

    @if ($use-reverse != false) {

        @if ($sf-fbg-flex-direction == row) {

            $sf-fbg-flex-direction: row-reverse !global;

        } @else {

            $sf-fbg-flex-direction: column-reverse !global;
        }

        @if ($from-breakpoint == zero) {

            $sf-fbg-flex-direction: column-reverse !global;
        }
    }

    @if ($use-equal-heights == true) {

        $align-items: stretch;
        $sf-fbg-gridcell-justify-content: flex-start !global;
        $sf-fbg-gridcell-presentation-height: 100% !global;
    }

    @if ($centered-grid != false) {

        $sf-fbg-gridcell-display: flex !global;
        $sf-fbg-gridcell-justify-content: center !global;
        $gridcell-width: 100%;
    }

    @if ($from-breakpoint == zero) {

        @include sf-render-grid($centered-grid, $align-items, $justify-content, $gridcell-width, $gutter, $row-gutter);

    } @else {

        @include sf-media($from: $from-breakpoint, $upto: $upto-breakpoint) {

            @include sf-render-grid($centered-grid, $align-items, $justify-content, $gridcell-width, $gutter, $row-gutter);
        }
    }
}

@mixin sf-render-grid (
    $centered-grid,
    $align-items,
    $justify-content,
    $gridcell-width,
    $gutter,
    $row-gutter
    ) {

    display: #{$sf-fbg-display};
    position: #{$sf-fbg-position};

    padding-top: #{$sf-fbg-padding-top};
    padding-right: #{$sf-fbg-padding-right};
    padding-bottom: #{$sf-fbg-padding-bottom};
    padding-left: #{$sf-fbg-padding-left};

    margin-top: #{$sf-fbg-margin-top};
    margin-right: #{$sf-fbg-margin-right};
    margin-bottom: #{$sf-fbg-margin-bottom};
    margin-left: #{$sf-fbg-margin-left};

    @if ($row-gutter != false) {

        margin-top: #{$row-gutter/2 * -1};
        margin-bottom: #{$row-gutter/2 * -1};
    }

    flex-grow: #{$sf-fbg-flex-grow};
    flex-shrink: #{$sf-fbg-flex-shrink};
    flex-wrap: #{$sf-fbg-flex-wrap};
    flex-direction: #{$sf-fbg-flex-direction};
    align-items: #{$align-items};
    justify-content: #{$justify-content};

    $gcwidth: false;

    @if ($gridcell-width != false) {

        $found: false;

        @if str-index($gridcell-width, "-") {

            @each $frac, $widths in $grid-widths {
    
                @each $width in $widths {
    
                    @if ($width == $gridcell-width) {
    
                        $gcwidth: $frac * 100%;
                        $found: true;
                    }
                }
            }
        }

        @if (sf-get-unit($gridcell-width) == "%" or $found == false) {

            $gcwidth: sf-strip-unit($gridcell-width) + unquote("%");
        }

        @if ($gutter != false) {

            @if (sf-get-unit($gutter) == "") {
    
                $gutter: to-length($gutter, "%");
            }

            margin-left: #{$gutter/2 * -1};
            margin-right: #{$gutter/2 * -1};
        }
    }

    > [role="gridcell"] {

        display: #{$sf-fbg-gridcell-display};
        position: #{$sf-fbg-gridcell-position};

        flex-direction: #{$sf-fbg-gridcell-flex-direction};
        justify-content: #{$sf-fbg-gridcell-justify-content};
        flex-grow: #{$sf-fbg-gridcell-flex-grow};
        flex-shrink: #{$sf-fbg-gridcell-flex-shrink};

        padding-top: #{$sf-fbg-gridcell-padding-top};
        padding-right: #{$sf-fbg-gridcell-padding-right};
        padding-bottom: #{$sf-fbg-gridcell-padding-bottom};
        padding-left: #{$sf-fbg-gridcell-padding-left};
    
        height: #{$sf-fbg-gridcell-height};

        @if ($gcwidth != false) {

            width: #{$gcwidth};

            @if ($sf-fbg-gridcell-flex-grow != 0) {

                flex-grow: 0;
            }

        } @else {

            flex-grow: 1;
        }

        @if ($gutter != false) {

            padding-left: #{$gutter/2};
            padding-right: #{$gutter/2};
        }

        @if ($row-gutter != false) {

            padding-top: #{$row-gutter/2};
            padding-bottom: #{$row-gutter/2};
        }
    
        @if ($sf-fbg-gridcell-box-sizing != false) {

            box-sizing: #{$sf-fbg-gridcell-box-sizing};
        }

        & > *:first-child {

            height: #{$sf-fbg-gridcell-presentation-height};

            @if ($centered-grid != false) {

                display: flex;
                flex-direction: row;
                align-items: center;
                justify-content: center;
            }
        }        
    }    
}

@mixin sf-make-equal-heights() {

    align-items: stretch;

    > [role="gridcell"] {

        & > * {

            height: 100%;
        }
    }
}

@mixin sf-make-centered-grid() {

    align-items: stretch;

    > [role="gridcell"] {

        & > * {

            height: 100%;

            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: center;
        }
    }
}

@mixin sf-make-reverse() {

    flex-direction: row-reverse;
}

@mixin sf-set-gutter (
    $from:false,
    $upto:false,
    $gutter:false,
    $row-gutter:false
) {

    $from-breakpoint: $from;
    $upto-breakpoint: $upto;

    @if ($from == false and $upto == false) {

        $from-breakpoint: zero;
    }

    @if ($gutter != false) {

        @if (sf-get-unit($gutter) == "") {

            $gutter: to-length($gutter, "%");
        }
    }

    @if ($from-breakpoint == zero) {

        @if ($row-gutter != false) {

            margin-top: #{$row-gutter/2 * -1};
            margin-bottom: #{$row-gutter/2 * -1};
        }
    
        @if ($gutter != false) {

            margin-left: #{$gutter/2 * -1};
            margin-right: #{$gutter/2 * -1};
    
            > [role="gridcell"] {
        
                padding-left: #{$gutter/2};
                padding-right: #{$gutter/2};
            }
        }

        @if ($row-gutter != false) {

            > [role="gridcell"] {
        
                padding-top: #{$row-gutter/2};
                padding-bottom: #{$row-gutter/2};
            }
        }

    } @else {

        @include sf-media($from: $from-breakpoint, $upto: $upto-breakpoint) {

            @if ($row-gutter != false) {

                margin-top: #{$row-gutter/2 * -1};
                margin-bottom: #{$row-gutter/2 * -1};
            }
        
            @if ($gutter != false) {

                margin-left: #{$gutter/2 * -1};
                margin-right: #{$gutter/2 * -1};
        
                > [role="gridcell"] {
            
                    padding-left: #{$gutter/2};
                    padding-right: #{$gutter/2};
                }
            }

            @if ($row-gutter != false) {

                > [role="gridcell"] {
            
                    padding-top: #{$row-gutter/2};
                    padding-bottom: #{$row-gutter/2};
                }
            }
        }
    }
}

@mixin sf-set-width (
    $from:false,
    $upto:false,
    $width:false,
    $important:false,
    $property:width
    ) {

    $from-breakpoint: $from;
    $upto-breakpoint: $upto;
    $important-text: "";
    
    @if ($important != false) {

        $important-text: " !important";
    }

    @if ($from == false and $upto == false) {

        $from-breakpoint: zero;
    }

    $gcwidth: 100%;

    @if ($width != false) {

        $found: false;

        @if (sf-get-unit($width) == "") {

            @each $frac, $widths in $grid-widths {
    
                @each $w in $widths {
    
                    @if ($w == $width) {
    
                        $gcwidth: $frac * 100%;
                        $found: true;
                    }
                }
            }
        }

        @if (sf-get-unit($width) == "%" or $found == false) {

            $gcwidth: sf-strip-unit($width) + unquote("%");
        }
    }

    $skip: false;

    @if ($from-breakpoint != false and map-get($media-breakpoints, $from-breakpoint) == false)
    {
        $skip: true;
    }

    @if ($upto-breakpoint != false and map-get($media-breakpoints, $upto-breakpoint) == false)
    {
        $skip: true;
    }

    @if ($skip == false) {

        @if ($from-breakpoint != zero) {

            @include sf-media($from: $from-breakpoint, $upto: $upto-breakpoint) {

                #{$property}: #{$gcwidth}#{$important-text};

                @if ($property == width) {

                    flex-grow: 0;
                }
            }

        } @else {

            #{$property}: #{$gcwidth}#{$important-text};

            @if ($property == width) {

                flex-grow: 0;
            }
        }
    }
}

@mixin sf-push (
    $from:false,
    $upto:false,
    $width:false
    ) {

    $from-breakpoint: $from;
    $upto-breakpoint: $upto;
    $width2: $width;

    @if ($from == false and $upto == false) {

        $from-breakpoint: zero;
    }

    @include sf-set-width (
        $from: $from-breakpoint,
        $upto: $upto-breakpoint,
        $width: $width2,
        $property: left
    );
}

@mixin sf-pull (
    $from:false,
    $upto:false,
    $width:false
    ) {

    $from-breakpoint: $from;
    $upto-breakpoint: $upto;
    $width2: $width;

    @if ($from == false and $upto == false) {

        $from-breakpoint: zero;
    }

    @include sf-set-width (
        $from: $from-breakpoint,
        $upto: $upto-breakpoint,
        $width: $width2,
        $property: right
    );
}

$grid-widths: (
    1:      one-whole,

    1/2:    one-half
            two-quarters
            three-sixths
            four-eighths
            five-tenths
            six-twelfths,

    1/3:    one-third
            two-sixths
            three-ninths
            four-twelfths,

    2/3:    two-thirds
            four-sixths
            six-ninths
            eight-twelfths,

    1/4:    one-quarter
            two-eighths
            three-twelfths,

    3/4:    three-quarters
            six-eighths
            nine-twelfths,

    1/5:    one-fifth
            two-tenths,

    2/5:    two-fifths
            four-tenths,

    3/5:    three-fifths
            six-tenths,

    4/5:    four-fifths
            eight-tenths,

    1/6:    one-sixth
            two-twelfths,

    5/6:    five-sixths
            ten-twelfths,

    // Sevenths
    1/7:    one-seventh,
    2/7:    two-sevenths,
    3/7:    three-sevenths,
    4/7:    four-sevenths,
    5/7:    five-sevenths,
    6/7:    six-sevenths,

    // Eighths
    1/8:    one-eighth,
    3/8:    three-eighths,
    5/8:    five-eighths,
    7/8:    seven-eighths,

    // Ninths
    1/9:    one-ninth,
    2/9:    two-ninths,
    4/9:    four-ninths,
    5/9:    five-ninths,
    7/9:    seven-ninths,
    8/9:    eight-ninths,
    
    // Tenths
    1/10:   one-tenth,
    3/10:   three-tenths,
    7/10:   seven-tenths,
    9/10:   nine-tenths,

    // Elevenths
    1/11:   one-eleventh,
    2/11:   two-elevenths,
    3/11:   three-elevenths,
    4/11:   four-elevenths,
    5/11:   five-elevenths,
    6/11:   six-elevenths,
    7/11:   seven-elevenths,
    8/11:   eight-elevenths,
    9/11:   nine-elevenths,
    10/11:  ten-elevenths,
    
    //Twelfths
    1/12:   one-twelfth,
    5/12:   five-twelfths,
    7/12:   seven-twelfths,
    11/12:  eleven-twelfths
);

$grid-increments: (
    one-whole,
    one-half,
    one-third,
    one-quarter,
    one-fifth,
    one-sixth,
    one-seventh,
    one-eighth,
    one-ninth,
    one-tenth,
    one-eleventh,
    one-twelfth
);
