//-----------------------------------------------------------------------//
// $FLEXBOX-GRID
// This is the flexbox-based responsive grid system.
// Flexbox is used because standard responsive grids
// have been problematic with scaling content.
// Most responsive grid features are available, including
// a twelve unit measurement system. I have also added a
// percentage-based unit system for fine grain control.
//-----------------------------------------------------------------------//


//-----------------------------------------------------------------------//
// MIXINS AND FUNCTIONS
//-----------------------------------------------------------------------//

@mixin sf-flexbox-grid (
    $from:false,
    $upto:false,

    $use-wrap:true,
    $use-reverse:false,
    $use-equal-heights:false,

    $enable-gutters:false,   // Use gutters (space-between) with gridcell widths and gutters controlled via sf-set-width()

    $gridcell-width:false,   // Grid cell widths (all the same, as a percentage)
    $gutter:false,           // Percentage for horizontal gutter (e.g. 5%)
    $row-gutter:false,       // Bottom margin (gutter) when grid cells wrap, except for the last row

    $justify-content:space-between,
    $align-items:false,
    $centered-grid:false
    ) {


    // GLOBAL GRID VARIABLES, RESET

    $sf-fbg-position: relative !global;
    $sf-fbg-display: flex !global;

    $sf-fbg-padding-top: 0 !global;
    $sf-fbg-padding-right: 0 !global;
    $sf-fbg-padding-bottom: 0 !global;
    $sf-fbg-padding-left: 0 !global;

    $sf-fbg-margin-top: 0 !global;
    $sf-fbg-margin-right: 0 !global;
    $sf-fbg-margin-bottom: 0 !global;
    $sf-fbg-margin-left: 0 !global;

    $sf-fbg-flex-direction: false !global;
    $sf-fbg-flex-wrap: nowrap !global;
    $sf-fbg-box-sizing: false !global;
    $sf-fbg-flex-grow: initial !global;
    $sf-fbg-flex-shrink: initial !global;

    $sf-fbg-gridcell-display: block !global;
    $sf-fbg-gridcell-position: initial !global;
    $sf-fbg-gridcell-width: auto !global;

    $sf-fbg-gridcell-padding-top: 0 !global;
    $sf-fbg-gridcell-padding-right: 0 !global;
    $sf-fbg-gridcell-padding-bottom: 0 !global;
    $sf-fbg-gridcell-padding-left: 0 !global;

    $sf-fbg-gridcell-height: auto !global;

    $sf-fbg-gridcell-box-sizing: false !global;
    $sf-fbg-gridcell-flex-grow: initial !global;
    $sf-fbg-gridcell-flex-shrink: initial !global;
    $sf-fbg-gridcell-flex-direction: initial !global;
    $sf-fbg-gridcell-justify-content: initial !global;

    $sf-fbg-gridcell-presentation-height: auto !global;
    
    // BEGIN MIXIN

    $from-breakpoint: $from;
    $upto-breakpoint: $upto;

    @if ($from == false and $upto == false) {

        $from-breakpoint: zero;
    }

    @if ($align-items == false) {

        $align-items: flex-start;
    }

    @if ($gridcell-width == false and $enable-gutters == false) {

        $justify-content: flex-start;
    }

    @if ($centered-grid != false) {

        $justify-content: center;
        $align-items: center;
    }

    @if ($sf-fbg-flex-direction == false) {

        $sf-fbg-flex-direction: row !global;
    }

    @if ($use-wrap != false) {

        $sf-fbg-flex-wrap: wrap !global;
    }

    @if ($use-reverse != false) {

        @if ($sf-fbg-flex-direction == row) {

            $sf-fbg-flex-direction: row-reverse !global;

        } @else {

            $sf-fbg-flex-direction: column-reverse !global;
        }
    }

    @if ($use-equal-heights == true) {

        $align-items: stretch;
        $sf-fbg-gridcell-presentation-height: 100% !global;
    }

    $sf-fbg-gridcell-position: relative !global;
    $sf-fbg-gridcell-width: 100% !global;

    @if ($centered-grid != false) {

        $sf-fbg-gridcell-display: flex !global;
        $sf-fbg-gridcell-flex-direction: column !global;
        $sf-fbg-gridcell-justify-content: center !global;
        $sf-fbg-gridcell-width: 100% !global;
    }

    @if ($from-breakpoint == zero) {

        @include sf-render-grid($centered-grid, $align-items, $justify-content, $gridcell-width, $gutter, $row-gutter);

    } @else {

        @include sf-media($from: $from-breakpoint, $upto: $upto-breakpoint) {

            @include sf-render-grid($centered-grid, $align-items, $justify-content, $gridcell-width, $gutter, $row-gutter);
        }
    }
}

@mixin sf-render-grid (
    $centered-grid,
    $align-items,
    $justify-content,
    $gridcell-width,
    $gutter,
    $row-gutter
    ) {

    display: $sf-fbg-display;
    position: $sf-fbg-position;

    padding-top: $sf-fbg-padding-top;
    padding-right: $sf-fbg-padding-right;
    padding-bottom: $sf-fbg-padding-bottom;
    padding-left: $sf-fbg-padding-left;

    margin-top: $sf-fbg-margin-top;
    margin-right: $sf-fbg-margin-right;
    margin-bottom: $sf-fbg-margin-bottom;
    margin-left: $sf-fbg-margin-left;

    @if ($row-gutter != false) {

        margin-bottom: $row-gutter * -1;
    }

    @if ($sf-fbg-box-sizing != false) {

        box-sizing: $sf-fbg-box-sizing;
    }

    flex-grow: $sf-fbg-flex-grow;
    flex-shrink: $sf-fbg-flex-shrink;
    flex-wrap: $sf-fbg-flex-wrap;
    flex-direction: $sf-fbg-flex-direction;
    align-items: $align-items;
    justify-content: $justify-content;

    $gcwidth: false;

    @if ($gridcell-width != false) {

        $found: false;

        @if (sf-get-unit($gridcell-width) == "") {

            @each $frac, $widths in $grid-widths {
    
                @each $width in $widths {
    
                    @if ($width == $gridcell-width) {
    
                        $gcwidth: $frac * 100%;
                        $found: true;
                    }
                }
            }
        }

        @if (sf-get-unit($gridcell-width) == "%" or $found == false) {

            $gcwidth: sf-strip-unit($gridcell-width) + unquote("%");
        }

        @if ($gutter != false) {

            @if (sf-get-unit($gutter) == "") {
    
                $gutter: to-length($gutter, "%");
            }
    
            $column-count: 100/sf-strip-unit($gcwidth);
    
            @if ($column-count > 1) {
    
                $gutter-total: ($column-count - 1) * sf-strip-unit($gutter);
                $gutter-diff: $gutter-total / $column-count;
    
                $gcwidth: (sf-strip-unit($gcwidth) - $gutter-diff) + unquote("%");
            }
        }

        &::after {
            content: "";
            flex-basis: $gcwidth;
        }
    }

    > [role="gridcell"] {

        display: $sf-fbg-gridcell-display;
        position: $sf-fbg-gridcell-position;
        width: $sf-fbg-gridcell-width;
    
        padding-top: $sf-fbg-gridcell-padding-top;
        padding-right: $sf-fbg-gridcell-padding-right;
        padding-bottom: $sf-fbg-gridcell-padding-bottom;
        padding-left: $sf-fbg-gridcell-padding-left;
    
        height: $sf-fbg-gridcell-height;

        @if ($gcwidth != false) {

            width: $gcwidth;
        }

        @if ($row-gutter != false) {

            margin-bottom: $row-gutter;
        }

        @if ($centered-grid != false) {

            flex-direction: $sf-fbg-gridcell-flex-direction;
            justify-content: $sf-fbg-gridcell-justify-content;
        }
    
        @if ($sf-fbg-gridcell-box-sizing != false) {

            box-sizing: $sf-fbg-gridcell-box-sizing;
        }

        flex-grow: $sf-fbg-gridcell-flex-grow;
        flex-shrink: $sf-fbg-gridcell-flex-shrink;


        & > * {

            height: $sf-fbg-gridcell-presentation-height;

            @if ($centered-grid != false) {

                display: flex;
                flex-direction: row;
                align-items: center;
                justify-content: center;
            }
        }        
    }    
}

@mixin sf-flexbox-grid-elastic-gutter (
    $use-wrap:true,
    $use-reverse:false,
    $use-equal-heights:false,

    $gridcell-width:false,   // Grid cell widths (all the same, as a percentage)
    $gutter:false,           // Percentage for horizontal gutter (e.g. 5%)
    $row-gutter:false,       // Bottom margin (gutter) when grid cells wrap, except for the last row

    $justify-content:false,
    $align-items:false,
    $centered-grid:false
    ) {

    $use-wrap2: $use-wrap;
    $use-reverse2: $use-reverse;
    $use-equal-heights2: $use-equal-heights;

    $gridcell-width2: $gridcell-width;
    $gutter2: $gutter;
    $row-gutter2: $row-gutter;

    $justify-content2: $justify-content;
    $align-items2: $align-items;
    $centered-grid2: $centered-grid;

    @if ($elastic-breakpoint) {

        @include sf-flexbox-grid (
            $from: $elastic-breakpoint,
            $use-wrap: $use-wrap2,
            $use-reverse: $use-reverse2,
            $use-equal-heights: $use-equal-heights2,

            $gridcell-width: $gridcell-width2,
            $gutter: $gutter2,
            $row-gutter: $row-gutter2,

            $justify-content: $justify-content2,
            $align-items: $align-items2,
            $centered-grid: $centered-grid2
        );
    }
}

@mixin sf-set-width (
    $from:false,
    $upto:false,
    $width:false,
    $gutter:false,       // Percentage for horizontal gutter (e.g. 5%)
    $important:false,
    $property:width
    ) {

    $from-breakpoint: $from;
    $upto-breakpoint: $upto;

    @if ($from == false and $upto == false) {

        $from-breakpoint: zero;
    }

    $gcwidth: 100%;

    @if ($width != false) {

        $found: false;

        @if (sf-get-unit($width) == "") {

            @each $frac, $widths in $grid-widths {
    
                @each $w in $widths {
    
                    @if ($w == $width) {
    
                        $gcwidth: $frac * 100%;
                        $found: true;
                    }
                }
            }
        }

        @if (sf-get-unit($width) == "%" or $found == false) {

            $gcwidth: sf-strip-unit($width) + unquote("%");
        }

        @if ($gutter != false) {

            @if (sf-get-unit($gutter) == "") {
    
                $gutter: to-length($gutter, "%");
            }
    
            $column-count: 100/sf-strip-unit($gcwidth);
    
            @if ($column-count > 1) {
    
                $gutter-total: ($column-count - 1) * sf-strip-unit($gutter);
                $gutter-diff: $gutter-total / $column-count;
    
                $gcwidth: (sf-strip-unit($gcwidth) - $gutter-diff) + unquote("%");
            }
        }
    }

    @if ($important == true) {

        @if ($from-breakpoint != zero) {

            @include sf-media($from: $from-breakpoint, $upto: $upto-breakpoint) {

                #{$property}: $gcwidth !important;
            }

        } @else {

            #{$property}: $gcwidth !important;
        }

    } @else {

        @if ($from-breakpoint != zero) {

            @include sf-media($from: $from-breakpoint, $upto: $upto-breakpoint) {

                #{$property}: $gcwidth;
            }

        } @else {

            #{$property}: $gcwidth;
        }
    }
}

@mixin sf-push (
    $from:false,
    $upto:false,
    $width:false
    ) {

    $from-breakpoint: $from;
    $upto-breakpoint: $upto;
    $width2: $width;

    @if ($from == false and $upto == false) {

        $from-breakpoint: zero;
    }

    @include sf-set-width (
        $from: $from-breakpoint,
        $upto: $upto-breakpoint,
        $width: $width2,
        $property: left
    );
}

@mixin sf-pull (
    $from:false,
    $upto:false,
    $width:false
    ) {

    $from-breakpoint: $from;
    $upto-breakpoint: $upto;
    $width2: $width;

    @if ($from == false and $upto == false) {

        $from-breakpoint: zero;
    }

    @include sf-set-width (
        $from: $from-breakpoint,
        $upto: $upto-breakpoint,
        $width: $width2,
        $property: right
    );
}

$grid-widths: (
    1:      one-whole,

    1/2:    one-half
            two-quarters
            three-sixths
            four-eighths
            five-tenths
            six-twelfths,

    1/3:    one-third
            two-sixths
            three-ninths
            four-twelfths,

    2/3:    two-thirds
            four-sixths
            six-ninths
            eight-twelfths,

    1/4:    one-quarter
            two-eighths
            three-twelfths,

    3/4:    three-quarters
            six-eighths
            nine-twelfths,

    1/5:    one-fifth
            two-tenths,

    2/5:    two-fifths
            four-tenths,

    3/5:    three-fifths
            six-tenths,

    4/5:    four-fifths
            eight-tenths,

    1/6:    one-sixth
            two-twelfths,

    5/6:    five-sixths
            ten-twelfths,

    // Eighths
    1/8:    one-eighth,
    3/8:    three-eighths,
    5/8:    five-eighths,
    7/8:    seven-eighths,

    // Ninths
    1/9:    one-ninth,
    2/9:    two-ninths,
    4/9:    four-ninths,
    5/9:    five-ninths,
    7/9:    seven-ninths,
    8/9:    eight-ninths,
    
    // Tenths
    1/10:   one-tenth,
    3/10:   three-tenths,
    7/10:   seven-tenths,
    9/10:   nine-tenths,

    //Twelfths
    1/12:   one-twelfth,
    5/12:   five-twelfths,
    7/12:   seven-twelfths,
    11/12:  eleven-twelfths
);
