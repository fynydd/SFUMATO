/**
 * @nuclide Elastic Width
 * @section Functions > Media
 * @modifiers
 *  sf-get-max-elastic-width() - Convert vw units to a maximum pixel width.
 * @markup
 *  sf-get-max-elastic-width(1920px)
 */
@function sf-get-max-elastic-width($elastic-size) {

    // If max (elastic) screen width is set, use it
    // to stop the object from growing in size past that point
    @if ($elastic-breakpoint and $elastic-size) {

        $max : sf-strip-unit($elastic-breakpoint) * (sf-strip-unit($elastic-size) / 100);

        @return $max + unquote("px");

    } @else {

        @return 0 + unquote("px");
    }
}

/**
 * @nuclide Hide
 * @section Mixins > Styles
 * @modifiers
 *  sf-hide() - Hide and element from everything based on media breakpoints using `display: none`.
 * @markup
 *  @include sf-hide($from: tablet-portrait);
 *  @include sf-hide($upto: tablet-portrait);
 */
@mixin sf-hide (
    $from:false, 
    $upto:false) {

    $frombreakpoint: $from;
    $uptobreakpoint: $upto;

    @include sf-media($from: $frombreakpoint, $upto: $uptobreakpoint) {

        display: none;
    }
}

/**
 * @nuclide Visually Hide
 * @section Mixins > Styles
 * @modifiers
 *  sf-visually-hide() - Visually hide an element without using `display: none`.
 * @markup
 *  @include sf-visually-hide($from: tablet-portrait);
 *  @include sf-visually-hide($upto: tablet-portrait);
 */
@mixin sf-visually-hide (
    $from:false, 
    $upto:false) {

    $frombreakpoint: $from;
    $uptobreakpoint: $upto;

    @include sf-media($from: $frombreakpoint, $upto: $uptobreakpoint) {

        border: 0;
        clip: rect(0 0 0 0);
        height: 1px;
        margin: -1px;
        overflow: hidden;
        padding: 0;
        position: absolute;
        width: 1px;
    }
}

/**
 * @nuclide String Ends With
 * @section Functions > Strings
 * @modifiers
 *  sf-str-endswith() - Determine if string ends with a substring.
 * @markup
 *  sf-str-endswith("source string", "substring");
 */
@function sf-str-endswith($string: false, $endswith: false) {

    @if ($string == false or $endswith == false) {

        @return false;

    } @else {

        @if (str-length(inspect($string)) > str-length(inspect($endswith))) {

            @if (str-index(inspect($string), inspect($endswith)) != null) {

                @if (str-index(inspect($string), inspect($endswith)) == str-length(inspect($string)) - str-length(inspect($endswith)) + 1) {

                    @return true;

                } @else {

                    @return false;
                }
                    
            } @else {

                @return false;
            }

        } @else {

            @return false;
        }
    }
}

/**
 * @nuclide String Split
 * @section Functions > Strings
 * @modifiers
 *  sf-str-split() - Split a string into parts using a delimiter.
 * @markup
 *  sf-str-split("source string", " ");
 */
@function sf-str-split($string, $separator: " ") {

    // empty array/list
    $split-arr: ();

    // first index of separator in string
    $index : str-index(inspect($string), inspect($separator));

    // loop through string
    @while $index != null {

        // get the substring from the first character to the separator
        $item: str-slice(inspect($string), 1, $index - 1);

        // push item to array
        $split-arr: append($split-arr, $item);

        // remove item and separator from string
        $string: str-slice(inspect($string), $index + 1);

        // find new index of separator
        $index : str-index(inspect($string), inspect($separator));
    }

    // add the remaining string to list (the last item)
    $split-arr: append($split-arr, inspect($string));

    @return $split-arr;
}

/**
 * @nuclide Value to Length
 * @section Functions > Conversions
 * @modifiers
 *  sf-to-length() - Add a unit to a value, returning a proper CSS measurement.
 * @markup
 *  sf-to-length(10, "rem");
 */
@function sf-to-length($value, $unit) {

    $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

    @if not index(map-keys($units), $unit) {

        @warn 'Invalid unit `#{$unit}`.';
    }

    @return sf-to-number($value) * map-get($units, $unit);
}

/**
 * @nuclide Get Unit from Value
 * @section Functions > Conversions
 * @modifiers
 *  sf-get-unit() - Strip the value from a measurement, returning the unit as a string.
 * @markup
 *  sf-get-unit(10rem);
 */
@function sf-get-unit($value) {

    $stringVal: inspect($value);
    $result: "";

    $units: ('px', 'cm', 'mm', '%', 'ch', 'pc', 'in', 'em', 'rem', 'pt', 'ex', 'vw', 'vh', 'vmin', 'vmax');

    @each $unit in $units {
    
        @if sf-str-endswith($stringVal, $unit) {

            $result: $unit;
        }    
    }

    @return $result;
}

/**
 * @atom Mobile Only
 * @section Styles
 * @modifiers
 *  .mobile-only - Use `display: none` if not viewing at tablet-portait or above.
 * @markup
 *  <div class="mobile-only"></div>
 */
.mobile-only {

    @include sf-media($from: tablet-portrait) {
        display: none !important;
    }
}

/**
 * @atom Not Mobile
 * @section Styles
 * @modifiers
 *  .not-mobile - Use `display: none` if viewing below tablet-portrait.
 * @markup
 *  <div class="not-mobile"></div>
 */
.not-mobile {

    @include sf-media($upto: tablet-portrait) {
        display: none !important;
    }
}

@mixin set-horizontal-unit-padding($include-mobile: true) {

    --horizontal-unit-padding: 0;

    padding-left: var(--horizontal-unit-padding);
    padding-right: var(--horizontal-unit-padding);

    @if ($include-mobile == true) {

        --horizontal-unit-padding: var(--zero-horizontal-unit-padding);
    }

    @include sf-media($from: phablet) {

        --horizontal-unit-padding: var(--phablet-horizontal-unit-padding);
    }

    @include sf-media($from: tablet-portrait) {

        --horizontal-unit-padding: var(--tablet-portrait-horizontal-unit-padding);
    }

    @include sf-media($from: tablet-landscape) {

        --horizontal-unit-padding: var(--tablet-landscape-horizontal-unit-padding);
    }

    @include sf-media($from: notebook) {

        --horizontal-unit-padding: var(--notebook-horizontal-unit-padding);
    }

    @include sf-media($from: desktop) {

        --horizontal-unit-padding: var(--desktop-horizontal-unit-padding);
    }

    @include sf-media($from: elastic) {

        --horizontal-unit-padding: var(--elastic-horizontal-unit-padding);
    }
}

@mixin set-vertical-unit-padding($include-mobile: true) {

    --vertical-unit-padding: 0;

    padding-top: var(--vertical-unit-padding);
    padding-bottom: var(--vertical-unit-padding);

    @if ($include-mobile == true) {

        --vertical-unit-padding: var(--zero-vertical-unit-padding);
    }

    @include sf-media($from: phablet) {

        --vertical-unit-padding: var(--phablet-vertical-unit-padding);
    }

    @include sf-media($from: tablet-portrait) {

        --vertical-unit-padding: var(--tablet-portrait-vertical-unit-padding);
    }

    @include sf-media($from: tablet-landscape) {

        --vertical-unit-padding: var(--tablet-landscape-vertical-unit-padding);
    }

    @include sf-media($from: notebook) {

        --vertical-unit-padding: var(--notebook-vertical-unit-padding);
    }

    @include sf-media($from: desktop) {

        --vertical-unit-padding: var(--desktop-vertical-unit-padding);
    }

    @include sf-media($from: elastic) {

        --vertical-unit-padding: var(--elastic-vertical-unit-padding);
    }
}

@mixin set-top-unit-padding($include-mobile: true) {

    --vertical-unit-padding: 0;

    padding-top: var(--vertical-unit-padding);

    @if ($include-mobile == true) {

        --vertical-unit-padding: var(--zero-vertical-unit-padding);
    }

    @include sf-media($from: phablet) {

        --vertical-unit-padding: var(--phablet-vertical-unit-padding);
    }

    @include sf-media($from: tablet-portrait) {

        --vertical-unit-padding: var(--tablet-portrait-vertical-unit-padding);
    }

    @include sf-media($from: tablet-landscape) {

        --vertical-unit-padding: var(--tablet-landscape-vertical-unit-padding);
    }

    @include sf-media($from: notebook) {

        --vertical-unit-padding: var(--notebook-vertical-unit-padding);
    }

    @include sf-media($from: desktop) {

        --vertical-unit-padding: var(--desktop-vertical-unit-padding);
    }

    @include sf-media($from: elastic) {

        --vertical-unit-padding: var(--elastic-vertical-unit-padding);
    }
}

@mixin set-bottom-unit-padding($include-mobile: true) {

    --vertical-unit-padding: 0;

    padding-bottom: var(--vertical-unit-padding);

    @if ($include-mobile == true) {

        --vertical-unit-padding: var(--zero-vertical-unit-padding);
    }

    @include sf-media($from: phablet) {

        --vertical-unit-padding: var(--phablet-vertical-unit-padding);
    }

    @include sf-media($from: tablet-portrait) {

        --vertical-unit-padding: var(--tablet-portrait-vertical-unit-padding);
    }

    @include sf-media($from: tablet-landscape) {

        --vertical-unit-padding: var(--tablet-landscape-vertical-unit-padding);
    }

    @include sf-media($from: notebook) {

        --vertical-unit-padding: var(--notebook-vertical-unit-padding);
    }

    @include sf-media($from: desktop) {

        --vertical-unit-padding: var(--desktop-vertical-unit-padding);
    }

    @include sf-media($from: elastic) {

        --vertical-unit-padding: var(--elastic-vertical-unit-padding);
    }
}

@mixin set-bottom-subunit-margin($include-mobile: true) {

    --vertical-subunit-padding: 0;

    margin-bottom: var(--vertical-subunit-padding);

    @if ($include-mobile == true) {

        --vertical-subunit-padding: var(--zero-vertical-subunit-padding);
    }

    @include sf-media($from: phablet) {

        --vertical-subunit-padding: var(--phablet-vertical-subunit-padding);
    }

    @include sf-media($from: tablet-portrait) {

        --vertical-subunit-padding: var(--tablet-portrait-vertical-subunit-padding);
    }

    @include sf-media($from: tablet-landscape) {

        --vertical-subunit-padding: var(--tablet-landscape-vertical-subunit-padding);
    }

    @include sf-media($from: notebook) {

        --vertical-subunit-padding: var(--notebook-vertical-subunit-padding);
    }

    @include sf-media($from: desktop) {

        --vertical-subunit-padding: var(--desktop-vertical-subunit-padding);
    }

    @include sf-media($from: elastic) {

        --vertical-subunit-padding: var(--elastic-vertical-subunit-padding);
    }
}
