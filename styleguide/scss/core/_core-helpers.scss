//-----------------------------------------------------------------------//
// $HELPERS
// Utility mixins, functions, and styles.
//-----------------------------------------------------------------------//


//-----------------------------------------------------------------------//
// MIXINS AND FUNCTIONS
//-----------------------------------------------------------------------//

// Hide and element from everything.
@mixin sf-hide (
    $from:false, 
    $upto:false) {

    $frombreakpoint: $from;
    $uptobreakpoint: $upto;

    @include sf-media($from: $frombreakpoint, $upto: $uptobreakpoint) {

        display: none;
    }
}

// Visually hide an element, but keep it accessible.
@mixin sf-visually-hide (
    $from:false, 
    $upto:false) {

    $frombreakpoint: $from;
    $uptobreakpoint: $upto;

    @include sf-media($from: $frombreakpoint, $upto: $uptobreakpoint) {

        border: 0;
        clip: rect(0 0 0 0);
        height: 1px;
        margin: -1px;
        overflow: hidden;
        padding: 0;
        position: absolute;
        width: 1px;
    }
}

@function sf-str-endswith($stringvar: false, $endswith: false) {

    @if ($stringvar == false or $endswith == false) {

        @return false;

    } @else {

        @if (str-length(inspect($stringvar)) > str-length(inspect($endswith))) {

            @if (str-index(inspect($stringvar), inspect($endswith)) != null) {

                @if (str-index(inspect($stringvar), inspect($endswith)) == str-length(inspect($stringvar)) - str-length(inspect($endswith)) + 1) {

                    @return true;

                } @else {

                    @return false;
                }
                    
            } @else {

                @return false;
            }

        } @else {

            @return false;
        }
    }
}

// Split a string into parts using a delimitter
@function str-split($string, $separator: " ") {

    // empty array/list
    $split-arr: ();

    // first index of separator in string
    $index : str-index(inspect($string), inspect($separator));

    // loop through string
    @while $index != null {

        // get the substring from the first character to the separator
        $item: str-slice(inspect($string), 1, $index - 1);

        // push item to array
        $split-arr: append($split-arr, $item);

        // remove item and separator from string
        $string: str-slice(inspect($string), $index + 1);

        // find new index of separator
        $index : str-index(inspect($string), inspect($separator));
    }

    // add the remaining string to list (the last item)
    $split-arr: append($split-arr, inspect($string));

    @return $split-arr;
}


// Convert a string to a proper SCSS number
@function to-number($value) {

    @if type-of($value) == 'number' {

        @return $value;

    } @else if type-of($value) != 'string' {

        @warn 'Value for `to-number` should be a number or a string.';
    }
    
    $result: 0;
    $digits: 0;
    $minus: str-slice($value, 1, 1) == '-';
    $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
    
    @for $i from if($minus, 2, 1) through str-length($value) {

        $character: str-slice($value, $i, $i);
      
        @if not (index(map-keys($numbers), $character) or $character == '.') {

            @return to-length(if($minus, -$result, $result), str-slice($value, $i))
        }
      
        @if $character == '.' {

            $digits: 1; 

        } @else if $digits == 0 {

            $result: $result * 10 + map-get($numbers, $character);  

        } @else {

            $digits: $digits * 10;
            $result: $result + map-get($numbers, $character) / $digits;
        }
    }
    
    @return if($minus, -$result, $result);
}
  
// Add a unit to a value, returning a proper SCSS number
@function to-length($value, $unit) {

    $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

    @if not index(map-keys($units), $unit) {

        @warn 'Invalid unit `#{$unit}`.';
    }

    @return $value * map-get($units, $unit);
}

// Establish proper measurement with unit
@function sf-normalize-value($size) {

    @if (sf-str-endswith($size, "rem")) {

        @return rem($size);

    } @else {

        @return sf-make-vw($size);
    }
}

// Convert a measurement to rems.
@function rem($rem-values) {

    @return sf-strip-unit($rem-values) * 1rem;
}

// Add vw unit to a number, return as string (e.g. 10 becomes "10vw")
@function sf-make-vw($number: false) {

    $value: $number;

    @if ($number != false) {

        $value: sf-strip-unit(to-number($number)) + unquote("vw");
    }

    @return $value;
}

// Strip the unit off a measurement (e.g. 10px becomes 10)
@function sf-strip-unit($number) {

    $value: to-number($number);

    @if type-of($value) == 'number' and not unitless($value) {

        @return $value / ($value * 0 + 1);

    }

    @return $value;
}

// Strip the value from a measurement, returning the unit as a string
@function sf-get-unit($value) {

    $stringval: inspect($value);
    $result: "";

    $units: ('px', 'cm', 'mm', '%', 'ch', 'pc', 'in', 'em', 'rem', 'pt', 'ex', 'vw', 'vh', 'vmin', 'vmax');

    @each $unit in $units {
    
        @if str-index($stringval, $unit) {

            $result: $unit;
        }    
    }

    //@debug $stringval + " --- " + $result;
    @return $result;
}


//-----------------------------------------------------------------------//
// STYLES
//-----------------------------------------------------------------------//

.mobile-only {

    @include sf-media($from: tablet-portrait) {
        display: none;
    }
}

@mixin set-top-vertical-gutter($include-mobile: true) {

    @if ($include-mobile == true) {

        margin-top: $vertical-gutter;
    }

    @include sf-media($from: tablet-portrait) {

        margin-top: $tablet-portrait-vertical-gutter;
    }

    @include sf-media($from: tablet-landscape) {

        margin-top: $tablet-landscape-vertical-gutter;
    }

    @include sf-media($from: notebook) {

        margin-top: $notebook-vertical-gutter;
    }

    @include sf-media($from: desktop) {

        margin-top: $desktop-vertical-gutter;
    }

    @include sf-media($from: elastic) {

        margin-top: $elastic-vertical-gutter;
    }
}

@mixin clear-top-margins($include-mobile: true) {

    @if ($include-mobile == true) {

        margin-top: 0;
    }

    @include sf-media($from: tablet-portrait) {

        margin-top: 0;
    }

    @include sf-media($from: tablet-landscape) {

        margin-top: 0;
    }

    @include sf-media($from: notebook) {

        margin-top: 0;
    }

    @include sf-media($from: desktop) {

        margin-top: 0;
    }

    @include sf-media($from: elastic) {

        margin-top: 0;
    }
}

@mixin set-bottom-vertical-gutter($include-mobile: true) {

    @if ($include-mobile == true) {

        margin-bottom: $vertical-gutter;
    }

    @include sf-media($from: tablet-portrait) {

        margin-bottom: $tablet-portrait-vertical-gutter;
    }

    @include sf-media($from: tablet-landscape) {

        margin-bottom: $tablet-landscape-vertical-gutter;
    }

    @include sf-media($from: notebook) {

        margin-bottom: $notebook-vertical-gutter;
    }

    @include sf-media($from: desktop) {

        margin-bottom: $desktop-vertical-gutter;
    }

    @include sf-media($from: elastic) {

        margin-bottom: $elastic-vertical-gutter;
    }
}

@mixin clear-bottom-margins($include-mobile: true) {

    @if ($include-mobile == true) {

        margin-bottom: 0;
    }

    @include sf-media($from: tablet-portrait) {

        margin-bottom: 0;
    }

    @include sf-media($from: tablet-landscape) {

        margin-bottom: 0;
    }

    @include sf-media($from: notebook) {

        margin-bottom: 0;
    }

    @include sf-media($from: desktop) {

        margin-bottom: 0;
    }

    @include sf-media($from: elastic) {

        margin-bottom: 0;
    }
}

@mixin set-horizontal-unit-padding($include-mobile: true) {

    @if ($include-mobile == true) {

        @include sf-padding-horizontal($horizontal-unit-padding);
    }

    @include sf-media($from: tablet-portrait) {

        @include sf-padding-horizontal($tablet-portrait-horizontal-unit-padding);
    }

    @include sf-media($from: tablet-landscape) {

        @include sf-padding-horizontal($tablet-landscape-horizontal-unit-padding);
    }

    @include sf-media($from: notebook) {

        @include sf-padding-horizontal($notebook-horizontal-unit-padding);
    }

    @include sf-media($from: desktop) {

        @include sf-padding-horizontal($desktop-horizontal-unit-padding);
    }

    @include sf-media($from: elastic) {

        @include sf-padding-horizontal($elastic-horizontal-unit-padding);
    }
}

@mixin set-top-unit-padding($include-mobile: true) {

    @if ($include-mobile == true) {

        padding-top: $vertical-unit-padding;
    }

    @include sf-media($from: tablet-portrait) {

        padding-top: $tablet-portrait-vertical-unit-padding;
    }

    @include sf-media($from: tablet-landscape) {

        padding-top: $tablet-landscape-vertical-unit-padding;
    }

    @include sf-media($from: notebook) {

        padding-top: $notebook-vertical-unit-padding;
    }

    @include sf-media($from: desktop) {

        padding-top: $desktop-vertical-unit-padding;
    }

    @include sf-media($from: elastic) {

        padding-top: $elastic-vertical-unit-padding;
    }
}

@mixin set-bottom-unit-padding($include-mobile: true) {

    @if ($include-mobile == true) {

        padding-bottom: $vertical-unit-padding;
    }

    @include sf-media($from: tablet-portrait) {

        padding-bottom: $tablet-portrait-vertical-unit-padding;
    }

    @include sf-media($from: tablet-landscape) {

        padding-bottom: $tablet-landscape-vertical-unit-padding;
    }

    @include sf-media($from: notebook) {

        padding-bottom: $notebook-vertical-unit-padding;
    }

    @include sf-media($from: desktop) {

        padding-bottom: $desktop-vertical-unit-padding;
    }

    @include sf-media($from: elastic) {

        padding-bottom: $elastic-vertical-unit-padding;
    }
}

@function line-style() {

    @return solid $mobile-lw-1px $line-color;
}

@function tablet-portrait-line-style() {

    @return solid $lw-1px $line-color;
}

@for $i from 10 through 100 {

    .width-pct-#{$i} {

        @include sf-media($upto: tablet-portrait) {

            width: to-length($i, '%') !important;
            margin: 0 auto;
        }
    }

    .width-tablet-portrait-pct-#{$i} {

        @include sf-media($from: tablet-portrait) {

            width: to-length($i, '%') !important;
            margin: 0 auto;
        }
    }
}
