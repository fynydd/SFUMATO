//-----------------------------------------------------------------------//
// $LAYOUT
// Mixins, functions, and styles for working with units and grids.
//-----------------------------------------------------------------------//

//-----------------------------------------------------------------------//
// MIXINS AND FUNCTIONS
//-----------------------------------------------------------------------//

$fractions: (

    1:      one-whole,
    1/2:    one-half,
    1/3:    one-third,
    2/3:    two-thirds,
    1/4:    one-quarter,
    3/4:    three-quarters,
    1/6:    one-sixth,
    5/6:    five-sixths,
    1/8:    one-eighth,
    3/8:    three-eighths,
    5/8:    five-eighths,
    7/8:    seven-eighths
);

// BOUNDS CHECKING...

@if ($enable-legacy-features) {

    @if ($highest-gutter-percentage < 0 or $highest-gutter-percentage > 100) {

        $highest-gutter-percentage: 25;
    }

    @if ($gutter-percentage-increment < 0 or $gutter-percentage-increment > 1) {

        $gutter-percentage-increment: 1;
    }

    @if ($highest-gutter-rem < 0 or $highest-gutter-rem > 100) {

        $highest-gutter-rem: 25;
    }

    @if ($gutter-rem-increment < 0 or $gutter-rem-increment > 1) {

        $gutter-rem-increment: 1;
    }

    @if ($highest-row-gutter-rem < 0 or $highest-row-gutter-rem > 100) {

        $highest-row-gutter-rem: 25;
    }

    @if ($row-gutter-rem-increment < 0 or $row-gutter-rem-increment > 1) {

        $row-gutter-rem-increment: 1;
    }
}

@mixin sf-grid-init($prefix: false, $breakpoint: zero) {

    @if ($prefix != false) {

        margin: 0;

        @if ($enable-legacy-features) {

            // HANDLE GUTTER PERCENTAGES

            @if ($highest-gutter-percentage > 0) {

                @for $i from 0 through $highest-gutter-percentage {

                    $f: 0;

                    @while $f < 1 {

                        &[#{$prefix}gutters="#{$i + $f}%"], &[#{$prefix}gutters="#{$i + $f}"] {

                            @include sf-set-gutter (
                                $gutter: sf-to-length($i + $f, "%")
                            );
                        }

                        $f: $f + $gutter-percentage-increment;
                    }
                }
            }

            // HANDLE GUTTER REMS

            @if ($highest-gutter-rem > 0) {

                @for $i from 0 through $highest-gutter-rem {

                    $f: 0;

                    @while $f < 1 {

                        &[#{$prefix}gutters="#{$i + $f}rem"] {

                            @include sf-set-gutter (
                                $gutter: sf-to-length($i + $f, "rem")
                            );
                        }

                        $f: $f + $gutter-rem-increment;
                    }
                }
            }
            
            // HANDLE ROW-GUTTER REMS

            @if ($highest-row-gutter-rem > 0) {

                @for $i from 0 through $highest-row-gutter-rem {

                    $f: 0;

                    @while $f < 1 {

                        &[#{$prefix}row-gutters="#{$i + $f}rem"] {

                            @include sf-set-gutter (
                                $row-gutter: sf-to-length($i + $f, "rem")
                            );
                        }

                        $f: $f + $row-gutter-rem-increment;
                    }
                }
            }

            // HANDLE IMPLICIT CELL WIDTHS

            @if ($base-column-count > 0) {

                @for $i from 1 through $base-column-count {

                    &[#{$prefix}cols="#{$i}"] {
        
                        & > [role="gridcell"] {

                            @include sf-set-width (
                                $width: 100/$i + unquote("%")
                            );
                        }
                    }
                }
            }

            // HANDLE EXPLICIT CELL WIDTHS

            &, & > [role="gridcell"] {

                @if ($base-column-count > 0) {

                    @for $i from 1 through $base-column-count {

                        $pct: $i/$base-column-count;
                        $pctname: false;

                        @each $fraction, $names in $fractions {

                            @if ($fraction == $pct) {

                                $pctname: nth($names, 1);
                            }
                        }

                        @if ($pctname != false) {

                            &[#{$prefix}col-#{$i}], &[#{$prefix}#{$pctname}] {
                
                                @include sf-set-width (
                                    $width: $i/$base-column-count * 100%
                                );
                            }

                        } @else {

                            &[#{$prefix}col-#{$i}] {
                
                                @include sf-set-width (
                                    $width: $i/$base-column-count * 100%
                                );
                            }
                        }

                        &[#{$prefix}push-#{$i}] {

                            @include sf-push (
                                $width: $i/$base-column-count * 100%
                            );
                        }

                        &[#{$prefix}pull-#{$i}] {

                            @include sf-pull (
                                $width: $i/$base-column-count * 100%
                            );
                        }
                    }
                }

                &[#{$prefix}width-auto] {

                    width: auto;
                    flex-grow: 1;
                }
            }
        }

        // CSS CUSTOM PROPERTIES
        // Experimental support for CSS variables in style attributes.
        @if ($enable-2016-features) {

            // GUTTERS
            // style="--sf-gutters: 30%;"
            // style="--sf-tabp-gutters: 30%;"
            &[style~="--#{$prefix}gutters:"] {

                margin-left: calc((var(--#{$prefix}gutters)/2) * -1);
                margin-right: calc((var(--#{$prefix}gutters)/2) * -1);

                & > [role="gridcell"] {
                    
                    padding-left: calc(var(--#{$prefix}gutters)/2);
                    padding-right: calc(var(--#{$prefix}gutters)/2);
                }
            }

            // ROW GUTTERS
            // style="--sf-row-gutters: 1.5rem;"
            // style="--sf-tabp-row-gutters: 1.5rem;"
            &[style~="--#{$prefix}row-gutters:"] {

                margin-top: calc((var(--#{$prefix}row-gutters)/2) * -1);
                margin-bottom: calc((var(--#{$prefix}row-gutters)/2) * -1);

                [role="grid"][sf-row-gutters] + &,
                [role="grid"][style~="--#{$prefix}row-gutters:"] + & {

                    margin-top: calc(var(--#{$prefix}row-gutters) * -1);
                }

                & > [role="gridcell"] {
                    
                    padding-top: calc(var(--#{$prefix}row-gutters)/2);
                    padding-bottom: calc(var(--#{$prefix}row-gutters)/2);
                }
            }

            // IMPLICIT COLUMN WIDTHS BASED ON COLUMN COUNT
            // style="--sf-cols: 3;"
            // style="--sf-tabp-cols: 3;"
            &[style~="--#{$prefix}cols:"] {

                & > [role="gridcell"] {
                    
                    width: calc(100% / var(--#{$prefix}cols));
                }
            }

            // REVERSE
            // style="--sf-flex-direction: column-reverse;"
            // style="--sf-flex-direction: row;"
            &[style~="--#{$prefix}flex-direction:"] {

                flex-direction: var(--#{$prefix}flex-direction);
            }

            // EQUAL HEIGHT CELLS PER ROW
            // style="--sf-equal-heights: true;"
            // style="--sf-tabp-equal-heights: true;"
            &[style~="--#{$prefix}equal-heights:"] {

                @include sf-make-equal-heights();
            }

            // VERTICALLY CENTERED GRID CELL CONTENT
            // style="--sf-centered: true;"
            // style="--sf-tabp-centered: true;"
            &[style~="--#{$prefix}centered:"] {
    
                @include sf-make-centered-grid();
            }

            // EXPLICIT GRID AND CELL WIDTHS
            // style="--sf-width: 30%;"
            // style="--sf-tabp-width: 30%;"
            &[style~="--#{$prefix}width:"],
            & > [role="gridcell"][style~="--#{$prefix}width:"] {
                
                width: var(--#{$prefix}width);
                flex-grow: 0;
            }

            // EXPLICIT GRID AND CELL WIDTHS (FRACTIONS)
            // style="--sf-frac: 3/12;"
            // style="--sf-tabp-frac: 7/12;"
            & > [role="gridcell"][style~="--#{$prefix}frac:"] {
                
                width: calc((var(--#{$prefix}frac)) * 100%);
                flex-grow: 0;
            }

            // CELL PUSH
            // style="--sf-push: 30%;"
            // style="--sf-tabp-push: 30%;"
            & > [role="gridcell"][style~="--#{$prefix}push:"] {
                
                left: var(--#{$prefix}push);
            }

            // CELL PUSH (FRACTIONS)
            // style="--sf-push-frac: 2/12;"
            // style="--sf-tabp-push-frac: 2/12;"
            & > [role="gridcell"][style~="--#{$prefix}push-frac:"] {
                
                left: calc((var(--#{$prefix}push-frac)) * 100%);
            }

            // CELL PULL
            // style="--sf-pull: 30%;"
            // style="--sf-tabp-pull: 30%;"
            & > [role="gridcell"][style~="--#{$prefix}pull:"] {
                
                right: var(--#{$prefix}pull);
            }

            // CELL PULL (FRACTIONS)
            // style="--sf-pull-frac: 2/12;"
            // style="--sf-tabp-pull-frac: 2/12;"
            & > [role="gridcell"][style~="--#{$prefix}pull-frac:"] {
                
                right: calc((var(--#{$prefix}pull-frac)) * 100%);
            }

            // AUTO WIDTH CELLS
            // style="--sf-width-auto: true;"
            // style="--sf-tabp-width-auto: true;"
            & > [role="gridcell"][style~="--#{$prefix}width-auto:"] {

                width: auto;
                flex-grow: 1;
            }
        }
    }
}


//-----------------------------------------------------------------------//
// STYLES
//-----------------------------------------------------------------------//

html, body {

    // Needed for mobile
    overflow-x: hidden;
    max-width: 100vw;
}

body {

    // Needed for mobile
    position: relative;

    //------------------------------------//
    //  PRIMARY SITE WRAPPER
    //------------------------------------//
    header, main, footer {

        @if (nth(map-get($media-breakpoints, elastic), 1) != false) {

            max-width: $elastic-breakpoint;
        }

        margin-left: auto;
        margin-right: auto;
    }
}


// GRID DEFAULTS

// <div role="grid" sf-tabp-cols="2" sf-tabp-reverse>
//     <div role="gridcell">...</div>
//     <div role="gridcell">...</div>
//     ...
// </div>

[role="grid"] {

    @include sf-flexbox-grid(
        $gridcell-width: $base-column-count
    );

    $prefix: "";

    @each $breakpoint, $props in $media-breakpoints {

        @if (nth($props, 1) != false) {

            @if ($breakpoint == zero) {

                $prefix: "sf-";

                @include sf-grid-init($prefix, $breakpoint);

                @if ($enable-legacy-features) {

                    &[sf-reverse] {

                        flex-direction: column-reverse;
                    }

                    &[sf-equal-heights] {

                        @include sf-make-equal-heights();
                    }

                    &[sf-centered] {

                        @include sf-make-centered-grid();
                    }
                }

            } @else {

                $prefix: "sf-" + nth($props, 2) + "-";

                @include sf-media($from: $breakpoint) {

                    @include sf-grid-init($prefix);

                    @if ($enable-legacy-features) {

                        &[#{$prefix + "not-reverse"}] {

                            flex-direction: row;
                        }
        
                        &[#{$prefix + "reverse"}] {

                            flex-direction: row-reverse;
                        }
        
                        &[#{$prefix + "equal-heights"}] {
        
                            @include sf-make-equal-heights();
                        }
        
                        &[#{$prefix + "centered"}] {
        
                            @include sf-make-centered-grid();
                        }
                    }
                }
            }
        }
    }
}


// UNIT STYLING
// These are the outer block containers that you stack to create your UX.

// <main>
//     <section id="hero-unit" sf-unit>
//         <div sf-outer-wrapper>
//             <div sf-inner-wrapper>
//                 ...
//                 <div sf-subunit>
//                     ...
//                 </div>
//                 ...
//             </div>
//         </div>
//     </div>
//     <section id="feature-unit" sf-unit>
//         <div sf-outer-wrapper>
//             <div sf-inner-wrapper>
//                 ...
//             </div>
//         </div>
//     </div>
//     ...

main {

    & > [sf-unit] {

        &:not(:last-of-type) {

            @include set-bottom-unit-padding();
        }

        &, &:last-of-type {

            @include set-bottom-unit-padding();
        }

        & > div[sf-outer-wrapper] {

            margin-left: auto;
            margin-right: auto;

            @if (nth(map-get($media-breakpoints, elastic), 1) != false) {

                max-width: $elastic-breakpoint;
            }

            @include set-horizontal-unit-padding();

            & > div[sf-inner-wrapper] {

                @include set-top-unit-padding();

                & > * {

                    &:first-child {

                        margin-top: 0;
                    }
                }
            }
        }
    }

    [sf-subunit] {

        @include set-bottom-subunit-margin();

        &:last-child {

            margin-bottom: 0;
        }
    }
}
