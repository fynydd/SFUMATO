//-----------------------------------------------------------------------//
// $LAYOUT
// Mixins, functions, and styles for working with units and grids.
//-----------------------------------------------------------------------//

//-----------------------------------------------------------------------//
// MIXINS AND FUNCTIONS
//-----------------------------------------------------------------------//

$fractions: (

    1:      one-whole,
    1/2:    one-half,
    1/3:    one-third,
    2/3:    two-thirds,
    1/4:    one-quarter,
    3/4:    three-quarters,
    1/6:    one-sixth,
    5/6:    five-sixths,
    1/8:    one-eighth,
    3/8:    three-eighths,
    5/8:    five-eighths,
    7/8:    seven-eighths
);

@mixin sf-grid-init($prefix: false) {

    @if ($prefix != false) {

        // BOUNDS CHECKING...

        @if ($highest-gutter-percentage < 0 or $highest-gutter-percentage > 100) {

            $highest-gutter-percentage: 25;
        }

        @if ($gutter-percentage-increment < 0 or $gutter-percentage-increment > 1) {

            $gutter-percentage-increment: 1;
        }

        @if ($highest-gutter-rem < 0 or $highest-gutter-rem > 100) {

            $highest-gutter-rem: 25;
        }

        @if ($gutter-rem-increment < 0 or $gutter-rem-increment > 1) {

            $gutter-rem-increment: 1;
        }

        @if ($highest-row-gutter-rem < 0 or $highest-row-gutter-rem > 100) {

            $highest-row-gutter-rem: 25;
        }

        @if ($row-gutter-rem-increment < 0 or $row-gutter-rem-increment > 1) {

            $row-gutter-rem-increment: 1;
        }

        // DEFAULTS/RESET

        margin: 0;

        // HANDLE GUTTER PERCENTAGES

        @if ($highest-gutter-percentage > 0) {

            @for $i from 0 through $highest-gutter-percentage {

                $f: 0;

                @while $f < 1 {

                    &[#{$prefix}gutters="#{$i + $f}%"], &[#{$prefix}gutters="#{$i + $f}"] {

                        @include sf-set-gutter (
                            $gutter: sf-to-length($i + $f, "%")
                        );
                    }

                    $f: $f + $gutter-percentage-increment;
                }
            }
        }

        // HANDLE GUTTER REMS

        @if ($highest-gutter-rem > 0) {

            @for $i from 0 through $highest-gutter-rem {

                $f: 0;

                @while $f < 1 {

                    &[#{$prefix}gutters="#{$i + $f}rem"] {

                        @include sf-set-gutter (
                            $gutter: sf-to-length($i + $f, "rem")
                        );
                    }

                    $f: $f + $gutter-rem-increment;
                }
            }
        }
        
        // HANDLE ROW-GUTTER REMS

        @if ($highest-row-gutter-rem > 0) {

            @for $i from 0 through $highest-row-gutter-rem {

                $f: 0;

                @while $f < 1 {

                    &[#{$prefix}row-gutters="#{$i + $f}rem"] {

                        @include sf-set-gutter (
                            $row-gutter: sf-to-length($i + $f, "rem")
                        );
                    }

                    $f: $f + $row-gutter-rem-increment;
                }
            }
        }

        // HANDLE IMPLICIT CELL WIDTHS

        @if ($base-column-count > 0) {

            @for $i from 1 through $base-column-count {

                &[#{$prefix}cols="#{$i}"] {
    
                    & > [role="gridcell"] {

                        @include sf-set-width (
                            $width: 100/$i + unquote("%")
                        );
                    }
                }
            }
        }

        // HANDLE EXPLICIT CELL WIDTHS

        &, & > [role="gridcell"] {

            @if ($base-column-count > 0) {

                @for $i from 1 through $base-column-count {

                    $pct: $i/$base-column-count;
                    $pctname: false;

                    @each $fraction, $names in $fractions {

                        @if ($fraction == $pct) {

                            $pctname: nth($names, 1);
                        }
                    }

                    @if ($pctname != false) {

                        &[#{$prefix}col-#{$i}], &[#{$prefix}#{$pctname}] {
            
                            @include sf-set-width (
                                $width: $i/$base-column-count * 100%
                            );
                        }

                    } @else {

                        &[#{$prefix}col-#{$i}] {
            
                            @include sf-set-width (
                                $width: $i/$base-column-count * 100%
                            );
                        }
                    }

                    &[#{$prefix}push-#{$i}] {

                        @include sf-push (
                            $width: $i/$base-column-count * 100%
                        );
                    }

                    &[#{$prefix}pull-#{$i}] {

                        @include sf-pull (
                            $width: $i/$base-column-count * 100%
                        );
                    }
                }
            }

            &[#{$prefix}width-auto] {

                width: auto;
                flex-grow: 1;
            }
        }
    }
}


//-----------------------------------------------------------------------//
// STYLES
//-----------------------------------------------------------------------//

html, body {

    // Needed for mobile
    overflow-x: hidden;
    max-width: 100vw;
}

body {

    // Needed for mobile
    position: relative;

    //------------------------------------//
    //  PRIMARY SITE WRAPPER
    //------------------------------------//
    header, main, footer {

        @if (nth(map-get($media-breakpoints, elastic), 1) != false) {

            max-width: $elastic-breakpoint;
        }

        margin-left: auto;
        margin-right: auto;
    }
}


/* GRID DEFAULTS

<div role="grid" sf-tabp-cols="2" sf-tabp-reverse>
    <div role="gridcell">...</div>
    <div role="gridcell">...</div>
    ...
</div>
*/

[role="grid"] {

    @include sf-flexbox-grid(
        $gridcell-width: $base-column-count
    );

    $prefix: "";

    @each $breakpoint, $props in $media-breakpoints {

        @if (nth($props, 1) != false) {

            @if ($breakpoint == zero) {

                $prefix: "sf-";

                @include sf-grid-init($prefix);

                &[sf-reverse] {

                    flex-direction: column-reverse;
                }

                &[sf-equal-heights] {

                    @include sf-make-equal-heights();
                }

                &[sf-centered] {

                    @include sf-make-centered-grid();
                }

            } @else {

                @include sf-media($from: $breakpoint) {

                    $prefix: "sf-" + nth($props, 2) + "-";

                    @include sf-grid-init($prefix);

                    &[#{"sf-" + nth($props, 2) + "-not-reverse"}] {

                        flex-direction: row;
                    }
    
                    &[#{"sf-" + nth($props, 2) + "-reverse"}] {

                        flex-direction: row-reverse;
                    }
    
                    &[sf-#{nth($props, 2)}-equal-heights] {
    
                        @include sf-make-equal-heights();
                    }
    
                    &[sf-#{nth($props, 2)}-centered] {
    
                        @include sf-make-centered-grid();
                    }
                }
            }
        }
    }

    & > [role="gridcell"] {

        &[sf-width-auto] {

            width: auto;
            flex-grow: 1;
        }

        /* EXPERIMENTAL
           Experimental support for CSS variables in style attributes.
           Browser support is too limited to use this pattern.

           style="--sf-width: 30%;"
           style="--sf-width: 3/10;"
           style="--sf-tabp-width: 30%;"

        @each $breakpoint, $props in $media-breakpoints {

            @if (nth($props, 1) != false) {
        
                @if ($breakpoint == zero) {
        
                    $prefix: "sf";
        
                    &[style~="--#{$prefix}-width:"] {
            
                        width: var(--#{$prefix}-width);
                        flex-grow: 0;
                    }
                
                } @else {
        
                    @include sf-media($from: $breakpoint) {
        
                        $prefix: "sf-" + nth($props, 2);
        
                        &[style~="--#{$prefix}-width:"] {
            
                            width: var(--#{$prefix}-width);
                            flex-grow: 0;
                        }
                    }
                }
            }
        }
        */
    }
}


/* UNIT STYLING
These are the outer block containers that you stack to create your UX.

<main>
    <section id="hero-unit" sf-unit>
        <div sf-outer-wrapper>
            <div sf-inner-wrapper>
                ...
                <div sf-subunit>
                    ...
                </div>
                ...
            </div>
        </div>
    </div>
    <section id="feature-unit" sf-unit>
        <div sf-outer-wrapper>
            <div sf-inner-wrapper>
                ...
            </div>
        </div>
    </div>
    ...
*/

main {

    & > [sf-unit] {

        &:not(:last-of-type) {

            @include set-bottom-unit-padding();
        }

        &, &:last-of-type {

            @include set-bottom-unit-padding();
        }

        & > div[sf-outer-wrapper] {

            margin-left: auto;
            margin-right: auto;

            @if (nth(map-get($media-breakpoints, elastic), 1) != false) {

                max-width: $elastic-breakpoint;
            }

            @include set-horizontal-unit-padding();

            & > div[sf-inner-wrapper] {

                @include set-top-unit-padding();

                & > * {

                    &:first-child {

                        margin-top: 0;
                    }
                }
            }
        }
    }

    [sf-subunit] {

        @include set-bottom-subunit-margin();

        &:last-child {

            margin-bottom: 0;
        }
    }
}
