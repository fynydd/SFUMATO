//-----------------------------------------------------------------------//
// $LAYOUT
// Mixins, functions, and styles for working with units and grids.
//-----------------------------------------------------------------------//

html, body {

    // Needed for mobile
    overflow-x: hidden;
    max-width: 100vw;
}

body {

    // Needed for mobile
    position: relative;

    [sf-elastic-wrapper] {

        @if (nth(map-get($media-breakpoints, elastic), 1) != false) {

            max-width: $elastic-breakpoint;
        }

        margin-left: auto;
        margin-right: auto;
    }
}

@each $breakpoint, $props in $media-breakpoints {

    @if (nth($props, 1) != false) {

        @if ($breakpoint == zero) {

            [sf-hide] {

                display: none !important;
            } 

        } @else {

            @include sf-media($from: $breakpoint) {

                [sf-hide-#{nth($props, 2)}-and-up] {

                    display: none !important;
                } 
            }

            @include sf-media($upto: $breakpoint) {

                [sf-hide-below-#{nth($props, 2)}] {

                    display: none !important;
                } 
            }
        }
    }
}

// UNIT STYLING
// These are the outer block containers that you stack to create your UI.

// <main>
//     <section id="hero-unit" sf-unit>
//         <div sf-outer-wrapper>
//             <div sf-inner-wrapper>
//                 ...
//                 <div sf-subunit>
//                     ...
//                 </div>
//                 ...
//             </div>
//         </div>
//     </div>
//     <section id="feature-unit" sf-unit>
//         <div sf-outer-wrapper>
//             <div sf-inner-wrapper>
//                 ...
//             </div>
//         </div>
//     </div>
//     ...

* {

    & > [sf-unit], &[sf-unit] {

        @include set-bottom-unit-padding();

        & > [sf-outer-wrapper] {

            margin-left: auto;
            margin-right: auto;

            @if (nth(map-get($media-breakpoints, elastic), 1) != false) {

                max-width: $elastic-breakpoint;
            }

            @include set-horizontal-unit-padding();

            & > [sf-inner-wrapper] {

                @include set-top-unit-padding();

                & > *:not([role="grid"]) {

                    &:first-child {

                        margin-top: 0;
                    }
                }
            }
        }
    }

    [sf-subunit] {

        @include set-bottom-subunit-margin();

        &:last-child {

            margin-bottom: 0;
        }
    }

    // SF-SCROLL-WRAPPER
    // Allows wide content to scroll horizontally on mobile.

    // <div sf-scroll-wrapper>
    //   <div sf-scroll-content>
    //     <table>
    //       ...
    //     </table>
    //   </div>
    // </div>

    &[sf-scroll-wrapper] {

        @include sf-media($upto: tablet-portrait) {

            margin-right: calc(var(--horizontal-unit-padding) * -1);
        }

        @include sf-media($from: phablet, $upto: tablet-portrait) {

            margin-right: calc(var(--phablet-horizontal-unit-padding) * -1);
        }

        overflow: scroll;
        -ms-overflow-style: none;

        &::-webkit-scrollbar {

            display: none;
        }

        & > [sf-scroll-content] {

            min-width: 100%;
            width: 100%;
            width: -webkit-max-content;

            @include sf-media($upto: tablet-portrait) {

                margin-right: var(--horizontal-unit-padding);
            }
    
            @include sf-media($from: phablet, $upto: tablet-portrait) {
    
                margin-right: var(--phablet-horizontal-unit-padding);
            }
        }
    }
}
