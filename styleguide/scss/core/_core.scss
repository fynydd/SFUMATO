/**
 * @nuclide Strip Unit
 * @section Functions > Measurements
 * @modifiers
 *  sf-strip-unit() - Strip the unit off a measure (e.g. 1px = 1).
 * @markup
 *  sf-strip-unit(1vw)
 */
@function sf-strip-unit($number) {

    $value: sf-to-number($number);

    @if type-of($value) == 'number' and not unitless($value) {

        @return $value / ($value * 0 + 1);

    }

    @return $value;
}

// Convert a string to a proper SCSS number
/**
 * @nuclide String to Number
 * @section Functions > Measurements
 * @modifiers
 *  sf-to-number() - Convert a string to a proper SCSS number.
 * @markup
 *  sf-to-number("1vw")
 */
@function sf-to-number($string) {

    @if type-of($string) == 'number' {

        @return $string;

    } @else if type-of($string) != 'string' {

        @warn 'Value for `sf-to-number` should be a number or a string.';
    }
    
    $result: 0;
    $digits: 0;
    $minus: str-slice($string, 1, 1) == '-';
    $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);
    
    @for $i from if($minus, 2, 1) through str-length($string) {

        $character: str-slice($string, $i, $i);
      
        @if not (index(map-keys($numbers), $character) or $character == '.') {

            @return sf-to-length(if($minus, -$result, $result), str-slice($string, $i));
        }
      
        @if $character == '.' {

            $digits: 1; 

        } @else if $digits == 0 {

            $result: $result * 10 + map-get($numbers, $character);  

        } @else {

            $digits: $digits * 10;
            $result: $result + map-get($numbers, $character) / $digits;
        }
    }
    
    @return if($minus, -$result, $result);
}
